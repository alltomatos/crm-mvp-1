#!/bin/bash

# Scripts para gerenciar servi√ßos PM2 do CRM MVP

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir ajuda
show_help() {
    echo -e "${BLUE}CRM MVP - Gerenciador de Servi√ßos PM2${NC}"
    echo ""
    echo "Uso: ./pm2-manager.sh [COMANDO]"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  start     - Iniciar todos os servi√ßos"
    echo "  stop      - Parar todos os servi√ßos"
    echo "  restart   - Reiniciar todos os servi√ßos"
    echo "  reload    - Recarregar todos os servi√ßos (zero downtime)"
    echo "  status    - Mostrar status dos servi√ßos"
    echo "  logs      - Mostrar logs em tempo real"
    echo "  logs-web  - Mostrar logs apenas do servi√ßo web"
    echo "  monitor   - Abrir monitor PM2"
    echo "  delete    - Remover todos os servi√ßos"
    echo "  setup     - Configura√ß√£o inicial"
    echo "  help      - Mostrar esta ajuda"
}

# Fun√ß√£o para verificar se PM2 est√° instalado
check_pm2() {
    if ! command -v pm2 &> /dev/null; then
        echo -e "${RED}‚ùå PM2 n√£o est√° instalado!${NC}"
        echo -e "${YELLOW}Instale com: npm install -g pm2${NC}"
        exit 1
    fi
}

# Fun√ß√£o para verificar se o arquivo de configura√ß√£o existe
check_config() {
    if [ ! -f "ecosystem.config.js" ]; then
        echo -e "${RED}‚ùå Arquivo ecosystem.config.js n√£o encontrado!${NC}"
        echo -e "${YELLOW}Execute: ./pm2-manager.sh setup${NC}"
        exit 1
    fi
}

# Configura√ß√£o inicial
setup() {
    echo -e "${BLUE}üîß Configurando ambiente...${NC}"
    
    # Criar diret√≥rio de logs se n√£o existir
    sudo mkdir -p /var/log/pm2
    sudo chmod 755 /var/log/pm2
    
    # Instalar depend√™ncias do workers se necess√°rio
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}üì¶ Instalando depend√™ncias...${NC}"
        npm install
    fi
    
    # Executar build se necess√°rio
    if [ ! -d ".next" ]; then
        echo -e "${YELLOW}üèóÔ∏è Executando build...${NC}"
        npm run build
    fi
    
    echo -e "${GREEN}‚úÖ Configura√ß√£o conclu√≠da!${NC}"
}

# Iniciar todos os servi√ßos
start_services() {
    echo -e "${BLUE}üöÄ Iniciando servi√ßos...${NC}"
    pm2 start ecosystem.config.js
    pm2 save
    echo -e "${GREEN}‚úÖ Servi√ßos iniciados!${NC}"
}

# Parar todos os servi√ßos
stop_services() {
    echo -e "${YELLOW}‚èπÔ∏è Parando servi√ßos...${NC}"
    pm2 stop ecosystem.config.js
    echo -e "${GREEN}‚úÖ Servi√ßos parados!${NC}"
}

# Reiniciar todos os servi√ßos
restart_services() {
    echo -e "${YELLOW}üîÑ Reiniciando servi√ßos...${NC}"
    pm2 restart ecosystem.config.js
    echo -e "${GREEN}‚úÖ Servi√ßos reiniciados!${NC}"
}

# Recarregar todos os servi√ßos (zero downtime)
reload_services() {
    echo -e "${YELLOW}üîÑ Recarregando servi√ßos (zero downtime)...${NC}"
    pm2 reload ecosystem.config.js
    echo -e "${GREEN}‚úÖ Servi√ßos recarregados!${NC}"
}

# Mostrar status dos servi√ßos
show_status() {
    echo -e "${BLUE}üìä Status dos servi√ßos:${NC}"
    pm2 status
    echo ""
    echo -e "${BLUE}üíæ Uso de mem√≥ria:${NC}"
    pm2 monit --lines 5
}

# Mostrar logs em tempo real
show_logs() {
    echo -e "${BLUE}üìù Logs em tempo real (Ctrl+C para sair):${NC}"
    pm2 logs --lines 50
}

# Mostrar logs apenas do servi√ßo web
show_web_logs() {
    echo -e "${BLUE}üìù Logs do servi√ßo web (Ctrl+C para sair):${NC}"
    pm2 logs crm-web --lines 50
}

# Abrir monitor PM2
open_monitor() {
    echo -e "${BLUE}üìä Abrindo monitor PM2...${NC}"
    pm2 monit
}

# Remover todos os servi√ßos
delete_services() {
    echo -e "${RED}üóëÔ∏è Removendo todos os servi√ßos...${NC}"
    read -p "Tem certeza? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        pm2 delete ecosystem.config.js
        pm2 save --force
        echo -e "${GREEN}‚úÖ Servi√ßos removidos!${NC}"
    else
        echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada${NC}"
    fi
}

# Fun√ß√£o principal
main() {
    check_pm2
    
    case $1 in
        start)
            check_config
            start_services
            ;;
        stop)
            check_config
            stop_services
            ;;
        restart)
            check_config
            restart_services
            ;;
        reload)
            check_config
            reload_services
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs
            ;;
        logs-web)
            show_web_logs
            ;;
        monitor)
            open_monitor
            ;;
        delete)
            delete_services
            ;;
        setup)
            setup
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Comando inv√°lido: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal com argumentos
main "$@"